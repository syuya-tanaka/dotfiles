" これはNeovim(Vim)をより快適に操作するための操作集
" 即戦力順 🐤 🐔 🤡


" -------------------cheetsheet------------------------------

" f, F
" t, T
" vf, vF, vt, vT
" viw, viW
" vi(, vi{, va(, va{
" vi', vi', va", va"
" vip, yip, dip
" vap, yap, dap
" e, E
" r + char
" viwc, viWc
" ci"
" cw
" ;, ,
" /, ?
" *
" $, 0, _"
" Vjjj:s/\(\w.*\)/任意の文字
" Vjjj:s/\(\w.*\)/任意の文字\1
" :s/old/new/g
" :%s/old/new/g
" ctrl-v g ctrl-a
"gU{motion}, gu{motion}
"ma, 'a, :delm a
"mA, 'A, :delm A



" -------------------こっちの操作の方が絶対に良いよ編🐤

" Ctrl + c で現在入力中のコマンドや検索を中断し、normal modeに戻る。
" insert modeから抜け出す時に便利。→ かなり便利だと思った。二つの用途がある事！

" f + 任意の文字 と F + 任意の文字

" 括弧の片割れにカーソルが位置する際に、% で反対側の片割れに移動できる。

" Vk= Vkで選択した箇所を自動的にインデントの調整をされる。(kの数は任意。)
" =ap でカーソル行ではなく、段落全体が自動インデント調整さをれる。めちゃ便利！

" ほんの僅かな修正をする場合、該当の箇所にカーソルを合わせて、r任意の文字とすると
" カーソル箇所が任意の文字に置き換えられる。

" 大文字Cでカーソルが位置する文字含め、それ以降の文字をdelete。
" Vで選択した箇所が存在している中で、Cもおすすめ。"

" _ でその行の最初の文字の位置にカーソル移動

" Ctrl + a で数字をインクリメント

" :copen でquickfix list。quickfix listはerror messageを保存してjumpできるリスト。
" :copenで開いたら選択してEnter。するとjumpできる。quickfix-listに戻るにはctrl+w then j。

" vf + 任意の文字

" e 単語の区切りの最後尾に移動(E よりもコンパクトに移動。)。

" E 単語の末尾に移動。

" / 順方向に文字列検索

" ? 逆方向に文字列検索

" ; その行を順方向に文字列検索 f と相性が良い。

" , その行を逆方向に文字列検索 f と相性が良い。

" qa でウィンドウ全てを閉じる。

" :ls で現在開いているバッファを一覧で表示。

" c changeのc 範囲選択をしたあとc入れて文字入力する。そして.を使用して繰り返すことができる。
" cw + 文字列 と * + . の相性が特段良すぎる。"
" まず*で検索をしている状態にしてcw + 文字列で変更した後、nで移動し.を入れると置換。

" . は直前のコマンドを記憶してくれているので、繰り返しができる。

" * で単語を検索できる。

"gU + motion でまとめて大文字にできる
"gu + motion でまとめて小文字にできる

" :s/old/new/g でカレント行のみ置換

"🤡
" ma でその行に対してmarkをつける。
" 'a でmaでmarkをつけた行に瞬間移動する。
" :delm a でaのマークを削除
" mA だと他のファイルのバッファを操作していたとしても、関係なく飛ぶ。
" :delm A でAのマークを削除

" -------------------------------------------------------------------------------



" horizontal editor mode
" -------------------水平操作編(ノーマルモード限定)
" -------------  this is the sample{sampledesuyo}
" -------------  this is the sample<sampledesuyo>

" f + その行で移動したい文字 → かなり便利だと思った
" ※ 小文字のfであればカーソル以降の文字列にジャンプするが、
"   大文字のFであればカーソル以前の文字列にジャンプすることができる。めっちゃ便利。

" e 単語の最後尾に移動

" visual modeで選択した箇所がある状態でpasteすると選択した箇所を上書きする→ まぁまぁ便利

" vi( or vi{ と入力すると、(任意の文字), {任意の文字}が存在する場合に
" その間にある文字全てを選択する→ 便利
" iはinner意味。


" 続き→ deleteはdを続けて、pasteはpを続ける。va( or va{ とすると括弧も選択
" 番外→ ya{ or ya( と入力すると(), {}を含めたyankが行われる。

" yiwで単語での区切りではなく、ひとまとまりでyank。
" ※ viwがよく使用される便利なもの。単語の先頭に位置していなくても単語を選択することができる。

" viは括弧含まない選択。vaは括弧含めた選択。yaは括弧含めたyank。viwは単語を選択。
" ※ vi,va, viWなどの文字列を選択する際、小文字のoでカーソルを頭とお尻を行き来できる。かなり便利
" viWはその行全てを選択。yiWはひとまとまりでyank。

" di( or di{ で間の文字列を削除。
" da( or da{ で括弧含めて間の文字列を削除。

" vt任意の文字と入力すると任意の文字までの文字列を選択する。→ 便利

" --------------------------------------------------------------------------------




" vertical editor mode
"---------------------垂直操作編(ノーマルモード限定)

" ctrl + d で画面半分スクロールダウン。ctrl + u で画面半分スクロールアップ。

" yap で段落ごとyank
" dap で段落ごとdelete
" yip はカーソル行の段落をyank
" dip はカーソル行の段落をdelete
" vip はその段落を選択

" 例えばリストを作成する際に事前にインデックスを指定して初期値を入れるという局面で、
" Foo
" Bar
" Baz
" Buzz
" とある時、ctrl + v 任意でk or j で大文字のi で文字を入力後、
" ctrl + cで抜けるとまとめて処理できる。
" それとまとめてお尻から処理するためには、大文字Vjjj:s/$/任意の文字 でまとめて変更できる。
" ↑これはverticalでまとめて編集したい際に超弩級で便利。


" 🤡
" Vjjj:s/\(\w.*\)/任意の文字で選択した範囲の文字列をまとめて処理することができる。
" もしも事前に単語が存在している場合それを利用することも可能。
" もし仮にFoo が存在する場合、Vjjj:s/\(\w.*\)/任意の文字\1 とすることにより再利用可能。
" ctrl + v or 普通に行選択で数字を選択し、gを押したあとctrl + aで123456789ということが可能。


sample_data[0] = "Foo";
sample_data[0] = "Bar";
sample_data[0] = "Hy";
sample_data[0] = "Hugie";


"----------------------keymap編

" noremap = trueは、同じキーマップが設定されている他のキーマップを辿らない。
" noremap = falseは、同じキーマップの設定がされている他のキーマップをたどる。


"----------------------マクロ編

" qa → なんらかの繰り返したい操作 → q  これでマクロを使える状態。
この状態を作り出した後、@a を入力するとマクロが使用できる。
aレジスタに保存したものが上書きされるまで何度も使用できる。
:reg で確認できる。
